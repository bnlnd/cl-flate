(cl:in-package :flate)

(defun decompress-gzip (&key input output (decompressor (make-decompressor)))
  (flet ((cstring ()
	   (do ((byte (funcall input) (funcall input)))
	       ((char= #\nul (code-char byte)))))
	 (u16 ()
	   (logior (funcall input) (ash (funcall input) 8))))
    (unless (= 31 (funcall input))
      (error 'malformed :format "gzip"))
    (unless (= 139 (funcall input))
      (error 'malformed :fmt "gzip"))
    (unless (= 8 (funcall input))
      (error 'malformed :fmt "gzip"))
    (let ((flags (funcall input)))
      (dotimes (i 6) (funcall input))
      (when (logbitp 2 flags)
	(dotimes (i (u16))
	  (funcall input)))
      (when (logbitp 3 flags)
	(cstring))
      (when (logbitp 4 flags)
	(cstring))
      (when (logbitp 1 flags)
	(u16))
      (decompress :input input :output output :decompressor decompressor)
      (dotimes (i 8 nil) (funcall input)))))
